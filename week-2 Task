import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class FileOrganizer {

    public static void main(String[] args) {
      
        String sourceDirectory = "path/to/source/directory";
        String destinationDirectory = "path/to/destination/directory";

       
        organizeFiles(sourceDirectory, destinationDirectory);
    }

    public static void organizeFiles(String sourceDirectory, String destinationDirectory) {
        File sourceDir = new File(sourceDirectory);
        File[] files = sourceDir.listFiles();

        if (files != null) {
            for (File file : files) {
                if (file.isFile()) {
                    String extension = getFileExtension(file);
                    if (extension != null) {
                     
                        File subDir = new File(destinationDirectory, extension);
                        if (!subDir.exists()) {
                            subDir.mkdir();
                        }

                
                        try {
                            Files.move(file.toPath(), Paths.get(subDir.getPath(), file.getName()));
                            System.out.println("Moved: " + file.getName() + " to " + subDir.getPath());
                        } catch (IOException e) {
                            System.err.println("Failed to move: " + file.getName());
                        }
                    }
                }
            }
            System.out.println("File organization completed!");
        } else {
            System.out.println("No files found in the source directory.");
        }
    }

    private static String getFileExtension(File file) {
        String name = file.getName();
        int lastIndexOfDot = name.lastIndexOf('.');
        if (lastIndexOfDot > 0 && lastIndexOfDot < name.length() - 1) {
            return name.substring(lastIndexOfDot + 1).toLowerCase();
        }
        return null;
    }
}
